# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: coprocess_response_object.proto

require 'google/protobuf'


descriptor_data = "\n\x1f\x63oprocess_response_object.proto\x12\tcoprocess\"\xdd\x01\n\x0eResponseObject\x12\x13\n\x0bstatus_code\x18\x01 \x01(\x05\x12\x10\n\x08raw_body\x18\x02 \x01(\x0c\x12\x0c\n\x04\x62ody\x18\x03 \x01(\t\x12\x37\n\x07headers\x18\x04 \x03(\x0b\x32&.coprocess.ResponseObject.HeadersEntry\x12-\n\x12multivalue_headers\x18\x05 \x03(\x0b\x32\x11.coprocess.Header\x1a.\n\x0cHeadersEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"%\n\x06Header\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x0e\n\x06values\x18\x02 \x03(\tB\x0cZ\n/coprocessb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Coprocess
  ResponseObject = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("coprocess.ResponseObject").msgclass
  Header = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("coprocess.Header").msgclass
end
